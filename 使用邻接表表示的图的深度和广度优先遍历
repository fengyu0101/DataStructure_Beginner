#include <iostream>
#include <fstream>
#include <vector>
using namespace std;
#define MVNum 100

enum GraphClass{UDGraph, DGraph};

typedef int VerTexType;
typedef struct ArcNode {//边节点
	int adjvex;
	struct ArcNode* nextarc;
	short info;//一些其它信息
}ArcNode;
typedef struct VNode {//头节点
	VerTexType data;
	ArcNode* firstarc;
}VNode,AdjList[MVNum];

class ALGraph {
public:
	ALGraph() { vexnum = 0; arcnum = 0; }
	ALGraph(GraphClass n, string fileroad, int v, int a) :vexnum(v), arcnum(a) { createG(n, fileroad); }
	void createG(GraphClass G, string fileroad) {
		fstream file;
		file.open(fileroad);
		for (int i = 0; i < vexnum; i++) {
			file >> vertices[i].data;
			vertices[i].firstarc = NULL;
		}
		for (int i = 0; i < arcnum; i++) {
			VerTexType v1, v2;
			file >> v1 >> v2;
			int n = locateVex(v1);
			int m = locateVex(v2);
			ArcNode* p = new ArcNode();
			p->adjvex = m;
			p->nextarc = vertices[n].firstarc;
			vertices[n].firstarc = p;
			if (G == UDGraph) {
				ArcNode* q = new ArcNode();
				q->adjvex = n;
				q->nextarc = vertices[m].firstarc;
				vertices[m].firstarc = q;
			}
		}
		file.close();
	}
	//若图中存在v1顶点，那么返回v1的索引，否则返回-1
	int locateVex(VerTexType v1) {
		for (int i = 0; i < vexnum; i++) {
			if (vertices[i].data == v1) { return i; }
			else if (i == vexnum - 1 && vertices[i].data != v1) { return -1; }
		}
	}
	//打印出图
	void display() {
		for (int i = 0; i < vexnum; i++) {
			cout << "[" << vertices[i].data << "]";
			ArcNode* q = vertices[i].firstarc;
			if (q == NULL) {
				cout << endl;
			}
			else {
				while (q->nextarc != NULL) {
					cout << "->" << "[" << q->adjvex << "]";
					q = q->nextarc;
				}
				cout << "->" << "[" << q->adjvex << "]" << endl;
			}
		}
	}
	//由索引返回顶点
	VerTexType getVex(int v) {
		if (v < vexnum)
			return vertices[v].data;
		else { cout << "出界"; return 0; }
	}
	//深度优先遍历(自己写的)
	//void DFSTraverse() {
	//	vector<int> had_visited;
	//	ArcNode* p = new ArcNode;
	//	p->adjvex = 0;
	//	while (had_visited.size() < vexnum) {
	//		had_visited.push_back(p->adjvex);//将所处的头节点存到数组里，当作这个头节点已被访问过
	//		p = vertices[p->adjvex].firstarc;//将p从边节点跳到对应的头节点
	//		if (p != NULL) {
	//			//这个判断是判断p目前所指的这个边节点是否已经被遍历过了
	//			//find函数当未找到所给的key时会返回数组的末尾
	//			while (find(begin(had_visited), end(had_visited), p->adjvex) != end(had_visited)) { 
	//				p = p->nextarc; 
	//				if (p == NULL)break; 
	//			}
	//		}
	//		//当p需要回溯时
	//		if (p == NULL&& had_visited.size() < vexnum) {
	//			int n = 2;
	//			while (p == NULL) {
	//				if (n == had_visited.size() + 1) { cout << "无解"; exit(1); }
	//				p = vertices[had_visited[had_visited.size()-n]].firstarc;
	//				//这里的循环和上面的那个是一样的，用来判断回溯到的这个节点是否被遍历过的
	//				while (find(begin(had_visited), end(had_visited), p->adjvex) != end(had_visited)) {
	//					p = p->nextarc; 
	//					if (p == NULL)break; 
	//				}
	//				n++;
	//			}
	//		}
	//	}
	//	for (int ver : had_visited) {
	//		cout << vertices[ver].data << "  ";
	//	}
	//}
	
	//课本上的
	void DFSTraverse() {
		bool visited[MVNum]={false};
		int count = 0;
		DFS(visited, 0,count);
		if (count < vexnum) {
			for (int i = 1; i < vexnum; i++)DFS(visited, i, count);
			cout << "\n" << "此图为非连通图";
		}
		cout << "\n" << count<<endl;
	}
	//广度优先遍历
	void BFSTraverse() {
		bool visited[MVNum] = { false };
		int count = 0;
		BFS(visited, 0, count);
		if (count < vexnum) {
			for (int i = 1; i < vexnum; i++)BFS(visited, i, count);
			cout << "\n" << "此图为非连通图";
		}
		cout << "\n" << count<<endl;
	}
	
private:
	void DFS(bool visited[MVNum], int n,int& count) {
		cout << n; count++;
		visited[n] = true;
		for (ArcNode* p = vertices[n].firstarc; p != NULL; p = p->nextarc) {
			if (!visited[p->adjvex])DFS(visited, p->adjvex,count);
		}
	}
	void BFS(bool visited[MVNum], int n, int& count) {
		cout << n; count++;
		visited[n] = true;
		vector<int> queue;
		queue.insert(queue.begin(), n);
		while (!queue.empty()) {
			int u = queue.back();
			queue.pop_back();
			for (ArcNode* p = vertices[u].firstarc; p != NULL; p = p->nextarc) {
				if (!visited[p->adjvex]) {
					cout << p->adjvex; count++; visited[p->adjvex] = true;
					queue.insert(queue.begin(), p->adjvex);
				}
			}
		}
	}
	AdjList vertices;
	int vexnum;
	int arcnum;
};

int main() {
	string fileroad = "Graph.txt";
	ALGraph Graph(UDGraph, fileroad, 8, 9);
	Graph.display();
	Graph.DFSTraverse();
	Graph.BFSTraverse();
	return 0;
}
